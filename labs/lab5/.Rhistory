iris.preproc <- scale(iris.log)
iris.pca <- prcomp(iris.preproc)
iris.pca.data <- predict(iris.pca)[,1:2]
#
mykmeans <- function(k, i, irises){
random_points <-list()
for(x in 1:k){
ran_x <- irises[sample(nrow(irises), 1), 1]
ran_y <- irises[sample(nrow(irises), 1), 2]
random_points <- c(random_points, ran_x, ran_y)
}
centroids <- matrix(c(random_points), ncol=2)
cluster <- c()
for(j in 1:i){
for(x in 1:nrow(irises)){
neighbours <- c()
for(y in 1:k) neighbours[[y]] <- dist(rbind(irises[x,], centroids[y,]), method="euclidean")
cluster[[x]] <- grep(min(neighbours), neighbours)
}
iris.clustering <- cbind(irises, cluster)
iris.clustering <- split(data.frame(iris.clustering), iris.clustering[,3])
centroids <- c()
for(x in 1:k){
centroid_x <- colMeans(as.data.frame(iris.clustering[x])[,1:2])[1]
centroid_y <- colMeans(as.data.frame(iris.clustering[x])[,1:2])[2]
centroids <- c(centroids, centroid_x, centroid_y)
}
centroids <- matrix(c(centroids), ncol=2)
}
plot(irises, col=cluster)
points(centroids, pch=4, cex=2, col=2)
}
#
mykmeans(3, 100, iris.pca.data)
#Lab5/Zad3
#set.seed(1234)
iris.numeric <- data.matrix(iris[,-5])
colnames(iris.numeric) <- NULL
iris.log <- log(iris.numeric)
iris.preproc <- scale(iris.log)
iris.pca <- prcomp(iris.preproc)
iris.pca.data <- predict(iris.pca)[,1:2]
#
mykmeans <- function(k, i, irises){
random_points <-list()
for(x in 1:k){
ran_x <- irises[sample(nrow(irises), 1), 1]
ran_y <- irises[sample(nrow(irises), 1), 2]
random_points <- c(random_points, ran_x, ran_y)
}
centroids <- matrix(c(random_points), ncol=2)
cluster <- c()
for(j in 1:i){
for(x in 1:nrow(irises)){
neighbours <- c()
for(y in 1:k) neighbours[[y]] <- dist(rbind(irises[x,], centroids[y,]), method="euclidean")
cluster[[x]] <- grep(min(neighbours), neighbours)
}
iris.clustering <- cbind(irises, cluster)
iris.clustering <- split(data.frame(iris.clustering), iris.clustering[,3])
centroids <- c()
for(x in 1:k){
centroid_x <- colMeans(as.data.frame(iris.clustering[x])[,1:2])[1]
centroid_y <- colMeans(as.data.frame(iris.clustering[x])[,1:2])[2]
centroids <- c(centroids, centroid_x, centroid_y)
}
centroids <- matrix(c(centroids), ncol=2)
}
plot(irises, col=cluster)
points(centroids, pch=4, cex=2, col=2)
}
#
mykmeans(3, 100, iris.pca.data)
#Lab5/Zad3
#set.seed(1234)
iris.numeric <- data.matrix(iris[,-5])
colnames(iris.numeric) <- NULL
iris.log <- log(iris.numeric)
iris.preproc <- scale(iris.log)
iris.pca <- prcomp(iris.preproc)
iris.pca.data <- predict(iris.pca)[,1:2]
#
mykmeans <- function(k, i, irises){
random_points <-list()
for(x in 1:k){
ran_x <- irises[sample(nrow(irises), 1), 1]
ran_y <- irises[sample(nrow(irises), 1), 2]
random_points <- c(random_points, ran_x, ran_y)
}
centroids <- matrix(c(random_points), ncol=2)
cluster <- c()
for(j in 1:i){
for(x in 1:nrow(irises)){
neighbours <- c()
for(y in 1:k) neighbours[[y]] <- dist(rbind(irises[x,], centroids[y,]), method="euclidean")
cluster[[x]] <- grep(min(neighbours), neighbours)
}
iris.clustering <- cbind(irises, cluster)
iris.clustering <- split(data.frame(iris.clustering), iris.clustering[,3])
centroids <- c()
for(x in 1:k){
centroid_x <- colMeans(as.data.frame(iris.clustering[x])[,1:2])[1]
centroid_y <- colMeans(as.data.frame(iris.clustering[x])[,1:2])[2]
centroids <- c(centroids, centroid_x, centroid_y)
}
centroids <- matrix(c(centroids), ncol=2)
}
plot(irises, col=cluster)
points(centroids, pch=4, cex=2, col=2)
}
#
mykmeans(3, 100, iris.pca.data)
source('~/Dokumenty/ci/labs/lab5/zad3.R')
#Lab5/Zad3
#set.seed(1234)
iris.numeric <- data.matrix(iris[,-5])
colnames(iris.numeric) <- NULL
iris.log <- log(iris.numeric)
iris.preproc <- scale(iris.log)
iris.pca <- prcomp(iris.preproc)
iris.pca.data <- predict(iris.pca)[,1:2]
#
mykmeans <- function(k, i, irises){
random_points <-list()
for(x in 1:k){
ran_x <- irises[sample(nrow(irises), 1), 1]
ran_y <- irises[sample(nrow(irises), 1), 2]
random_points <- c(random_points, ran_x, ran_y)
}
centroids <- matrix(c(random_points), ncol=2)
cluster <- c()
for(j in 1:i){
for(x in 1:nrow(irises)){
neighbours <- c()
for(y in 1:k) neighbours[[y]] <- dist(rbind(irises[x,], centroids[y,]), method="euclidean")
cluster[[x]] <- grep(min(neighbours), neighbours)
}
iris.clustering <- cbind(irises, cluster)
iris.clustering <- split(data.frame(iris.clustering), iris.clustering[,3])
centroids <- c()
for(x in 1:k){
centroid_x <- colMeans(as.data.frame(iris.clustering[x])[,1:2])[1]
centroid_y <- colMeans(as.data.frame(iris.clustering[x])[,1:2])[2]
centroids <- c(centroids, centroid_x, centroid_y)
}
centroids <- matrix(c(centroids), ncol=2)
png(filename = paste("mykmeans/iteration_", "j", ".png", sep=""))
plot(irises, col=cluster)
points(centroids, pch=4, cex=2, col=2)
dev.off()
}
}
#
mykmeans(3, 100, iris.pca.data)
#Lab5/Zad3
#set.seed(1234)
iris.numeric <- data.matrix(iris[,-5])
colnames(iris.numeric) <- NULL
iris.log <- log(iris.numeric)
iris.preproc <- scale(iris.log)
iris.pca <- prcomp(iris.preproc)
iris.pca.data <- predict(iris.pca)[,1:2]
#
mykmeans <- function(k, i, irises){
random_points <-list()
for(x in 1:k){
ran_x <- irises[sample(nrow(irises), 1), 1]
ran_y <- irises[sample(nrow(irises), 1), 2]
random_points <- c(random_points, ran_x, ran_y)
}
centroids <- matrix(c(random_points), ncol=2)
cluster <- c()
for(j in 1:i){
for(x in 1:nrow(irises)){
neighbours <- c()
for(y in 1:k) neighbours[[y]] <- dist(rbind(irises[x,], centroids[y,]), method="euclidean")
cluster[[x]] <- grep(min(neighbours), neighbours)
}
iris.clustering <- cbind(irises, cluster)
iris.clustering <- split(data.frame(iris.clustering), iris.clustering[,3])
centroids <- c()
for(x in 1:k){
centroid_x <- colMeans(as.data.frame(iris.clustering[x])[,1:2])[1]
centroid_y <- colMeans(as.data.frame(iris.clustering[x])[,1:2])[2]
centroids <- c(centroids, centroid_x, centroid_y)
}
centroids <- matrix(c(centroids), ncol=2)
}
plot(irises, col=cluster)
points(centroids, pch=4, cex=2, col=2)
}
#
mykmeans(3, 100, iris.pca.data)
View(mykmeans)
source('~/Dokumenty/ci/labs/lab5/zad3.R')
source('~/Dokumenty/ci/labs/lab5/zad3.R')
source('~/Dokumenty/ci/labs/lab5/zad3.R')
source('~/Dokumenty/ci/labs/lab5/zad3.R')
source('~/Dokumenty/ci/labs/lab5/zad3.R')
source('~/Dokumenty/ci/labs/lab5/zad3.R')
source('~/Dokumenty/ci/labs/lab5/zad3.R')
source('~/Dokumenty/ci/labs/lab5/zad3.R')
source('~/Dokumenty/ci/labs/lab5/zad3.R')
source('~/Dokumenty/ci/labs/lab5/zad3.R')
source('~/Dokumenty/ci/labs/lab5/zad3.R')
source('~/Dokumenty/ci/labs/lab5/zad3.R')
source('~/Dokumenty/ci/labs/lab5/zad3.R')
install.packages("neuralnet")
source('~/Dokumenty/ci/labs/lab5/zad2.R')
source('~/Dokumenty/ci/labs/lab5/zad3.R')
source('~/Dokumenty/ci/labs/lab6/zad1.R')
#Lab6/Zad1
require(neuralnet)
#Lab6/Zad1
require(neuralnet)
#
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))
normalize <- function(x) {
num <- x - min(x)
denom <- max(x) - min(x)
return (num/denom)
}
#Lab6/Zad1
require(neuralnet)
#
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))
normalize <- function(x) {
num <- x - min(x)
denom <- max(x) - min(x)
return (num/denom)
}
iris_norm <- as.data.frame(lapply(iris[1:4], normalize))
View(iris_norm)
source('~/Dokumenty/ci/labs/lab6/zad1.R')
#Lab6/Zad1
require(neuralnet)
#
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))
normalize <- function(x) {
num <- x - min(x)
denom <- max(x) - min(x)
return (num/denom)
}
iris.norm <- as.data.frame(lapply(iris[1:4], normalize))
iris.norm <- cbind(iris.norm, iris[,5])
#
View(iris.norm)
#Lab6/Zad1
require(neuralnet)
#
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))
normalize <- function(x) {
num <- x - min(x)
denom <- max(x) - min(x)
return (num/denom)
}
iris.norm <- as.data.frame(lapply(iris[1:4], normalize))
iris.norm <- cbind(iris.norm, iris$Species)
#
View(iris.norm)
source('~/Dokumenty/ci/labs/lab6/zad1.R')
source('~/Dokumenty/ci/labs/lab6/zad1.R')
source('~/Dokumenty/ci/labs/lab5/zad3.R')
source('~/Dokumenty/ci/labs/lab6/zad1.R')
source('~/Dokumenty/ci/labs/lab6/zad1.R')
source('~/Dokumenty/ci/labs/lab6/zad1.R')
source('~/Dokumenty/ci/labs/lab6/zad1.R')
source('~/Dokumenty/ci/labs/lab5/zad3.R')
source('~/Dokumenty/ci/labs/lab5/zad3.R')
source('~/Dokumenty/ci/labs/lab5/zad3.R')
source('~/Dokumenty/ci/labs/lab5/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad1.R')
source('~/Dokumenty/ci/labs/lab6/zad1.R')
source('~/Dokumenty/ci/labs/lab6/zad1.R')
source('~/Dokumenty/ci/labs/lab6/zad1.R')
source('~/Dokumenty/ci/labs/lab6/zad1.R')
#Lab6/Zad2
require(neuralnet)
#
normalize <- function(x) {
num <- x - min(x)
denom <- max(x) - min(x)
return (num/denom)
}
split_species <- function(iris) {
for(x in 1:nrow(iris)){
}
}
#
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))
iris.norm <- as.data.frame(lapply(iris[1:4], normalize))
iris.norm <- cbind(iris.norm, iris$Species)
iris.norm <- cbind(iris.norm, "Setosa", "Versicolor", "Virgnica")
iris.norm <- split_species(iris.norm)
#
source('~/Dokumenty/ci/labs/lab6/zad1.R')
View(iris.norm)
source('~/Dokumenty/ci/labs/lab6/zad1.R')
source('~/Dokumenty/ci/labs/lab6/zad1.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
iris.norm$"Setosa"
iris.norm$Setosa
iris.norm$Species
View(iris.norm)
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
View(iris.norm)
source('~/Dokumenty/ci/labs/lab6/zad2.R')
View(iris.norm)
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
View(iris.norm)
View(iris.norm)
source('~/Dokumenty/ci/labs/lab6/zad2.R')
View(species)
View(iris.norm)
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
View(iris.norm)
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
iris.norm$Setosa
iris.norm$Setosa[x]
iris.norm$Setosa[1]
iris.norm[1]$Setosa
iris.norm[1]$Iris$Species
View(iris.norm)
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
View(iris.norm)
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
View(iris.norm)
source('~/Dokumenty/ci/labs/lab6/zad2.R')
View(iris.norm)
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
View(species)
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
View(species)
iris.norm[1]
iris.norm[1,5]
iris.norm[1,2]
source('~/Dokumenty/ci/labs/lab6/zad2.R')
#Lab6/Zad2
require(neuralnet)
#
normalize <- function(x) {
num <- x - min(x)
denom <- max(x) - min(x)
return (num/denom)
}
split_species <- function(iris) {
for(x in 1:nrow(iris)){
if(iris[x,5] == "Setosa") iris[x,6] <- TRUE
if(iris[x,5] == "Versicolor") iris[x,7] <- TRUE
if(iris[x,5] == "Virgnica") iris[x,8] <- TRUE
}
}
#
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))
iris.norm <- as.data.frame(lapply(iris[1:4], normalize))
iris.norm <- cbind(iris.norm, iris$Species)
species_names <- c("Setosa", "Versicolor", "Virgnica")
species <- matrix(species_names, ncol=3)
colnames(species) <- species_names
iris.norm <- cbind(iris.norm, species)
#iris.norm <- split_species(iris.norm)
#
iris.norm[1]
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
iris.norm[1,5]
iris.norm[1,6]
iris.norm[1,7]
source('~/Dokumenty/ci/labs/lab6/zad2.R')
View(species)
source('~/Dokumenty/ci/labs/lab6/zad2.R')
View(iris.norm)
iris[1,5] == "Setosa"
iris[1,5]
iris[1,5] == "setosa"
source('~/Dokumenty/ci/labs/lab6/zad2.R')
View(iris.norm)
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
if(iris[1,5] == "setosa") iris[1,6] <- TRUE
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
View(iris.norm)
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
View(iris.norm)
source('~/Dokumenty/ci/labs/lab6/zad2.R')
warnings()
source('~/Dokumenty/ci/labs/lab6/zad2.R')
View(iris.norm)
source('~/Dokumenty/ci/labs/lab6/zad2.R')
View(iris.norm)
source('~/Dokumenty/ci/labs/lab6/zad2.R')
View(iris.norm)
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
#Lab6/Zad2
require(neuralnet)
#
normalize <- function(x) {
num <- x - min(x)
denom <- max(x) - min(x)
return (num/denom)
}
split_species <- function(iris) {
for(x in 1:nrow(iris)){
if(iris[x,5] == "setosa") iris[x,6] = 1
if(iris[x,5] == "versicolor") iris[x,7] = 1
if(iris[x,5] == "virginica") iris[x,8] = 1
}
return (iris[,-5])
}
#
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))
iris.norm <- as.data.frame(lapply(iris[1:4], normalize))
iris.norm <- cbind(iris.norm, iris$Species)
species_names <- c("setosa", "versicolor", "virginica")
#species <- matrix(species_names, ncol=3)
species <- matrix(0, nrow = 150, ncol = 3)
colnames(species) <- species_names
iris.norm <- cbind(iris.norm, species)
iris.norm <- split_species(iris.norm)
iris.training <- iris.norm[ind==1, 1:7]
iris.test <- iris.norm[ind==2, 1:7]
#
iris.nn <- neuralnet(setosa + versicolor + virginica ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, iris.training)
plot(iris.nn)
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
View(iris.predict)
View(iris.predict)
iris.predict[["neurons"]][[2]]
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
install.packages("heuristica")
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab3/zad5.R')
source('~/Dokumenty/ci/labs/lab3/zad5.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
View(iris.predict)
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab6/zad2.R')
source('~/Dokumenty/ci/labs/lab3/zad5.R')
